globals

This option defines custom globals to not consider while linting.  This can be
very useful for defining other environments.

    globals: {
        "angular": false,       // angular
        "_": false,             // underscore.js
        "module": false         // Gruntfile
    }

Note that you turn the error checking off for these variables, as opposed to
turning on the predefined environments below.

--

browser

This option defines globals exposed by modern browsers: all the way from good
old `document` and `navigator` to the HTML5 `FileReader` and other new
developments in the browser world.

**Note:** This option doesn't expose variables like `alert` or `console`. See
option `devel` for more information.

--

couch

This option defines globals exposed by [CouchDB](http://couchdb.apache.org/).
CouchDB is a document-oriented database that can be queried and indexed in a
MapReduce fashion using JavaScript.

--

devel

This option defines globals that are usually used for logging poor-man's
debugging: `console`, `alert`, etc. It is usually a good idea to not ship them
in production because, for example, `console.log` breaks in legacy versions of
Internet Explorer.

--

dojo

This option defines globals exposed by the [Dojo Toolkit](http://dojotoolkit.org/).

--

jquery

This option defines globals exposed by the [jQuery](http://jquery.com/)
JavaScript library.

--

mootools

This option defines globals exposed by the [MooTools](http://mootools.net/)
JavaScript framework.

--

node

This option defines globals available when your code is running inside of the
Node runtime environment. [Node.js](http://nodejs.org/) is a server-side
JavaScript environment that uses an asynchronous event-driven model. This option
also skips some warnings that make sense in the browser environments but
don't make sense in Node such as file-level `use strict` pragmas and `console.log`
statements.

--

nonstandard

This option defines non-standard but widely adopted globals such as `escape` and
`unescape`.

--

phantom

This option defines globals available when your core is running inside
of the PhantomJS runtime environment. [PhantomJS](http://phantomjs.org/)
is a headless WebKit scriptable with a JavaScript API. It has fast and native support
for various web standards: DOM handling, CSS selector, JSON, Canvas, and SVG.

--

prototypejs

This option defines globals exposed by the [Prototype](http://www.prototypejs.org/)
JavaScript framework.

--

rhino

This option defines globals available when your code is running inside of the
Rhino runtime environment. [Rhino](http://www.mozilla.org/rhino/) is an
open-source implementation of JavaScript written entirely in Java.

--

worker

This option defines globals available when your code is running inside of a Web
Worker. [Web Workers](https://developer.mozilla.org/en/Using_web_workers)
provide a simple means for web content to run scripts in background threads.

--

wsh

This option defines globals available when your code is running as a script for
the [Windows Script Host](http://en.wikipedia.org/wiki/Windows_Script_Host).

--

yui

This option defines globals exposed by the [YUI](http://yuilibrary.com/)
JavaScript framework.
